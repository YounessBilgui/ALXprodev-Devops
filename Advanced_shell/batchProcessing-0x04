#!/bin/bash

# File: fetch_multiple_pokemon_parallel

# Create output directory
output_dir="pokemon_data"
mkdir -p "$output_dir"

# List of Pokémon (lowercase)
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Function to fetch data for a single Pokémon
fetch_pokemon() {
    local pokemon=$1
    echo "Fetching data for $pokemon..."
    response=$(curl -s "https://pokeapi.co/api/v2/pokemon/$pokemon")
    if [[ -n "$response" && "$response" != "Not Found" ]]; then
        echo "$response" > "$output_dir/${pokemon}.json"
        echo "Saved data to $output_dir/${pokemon}.json ✅"
    else
        echo "❌ Failed to fetch data for $pokemon"
    fi
}

echo "Starting parallel Pokémon data fetch..."

# Array to store background process PIDs
pids=()

# Fetch all Pokémon in parallel and store PIDs
for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=("$!")
done

# Example: kill the first background process (for demonstration)
# Uncomment the next two lines to actually kill a process
# echo "Killing process with PID: ${pids[0]}"
# kill ${pids[0]}

# Wait for all background jobs to finish
wait
echo "✅ All Pokémon data fetched successfully!"
